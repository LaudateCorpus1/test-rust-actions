name: Continuous Integration
on: [push, pull_request]
jobs:
  context:
    name: Context
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

  # Run the `rustfmt` code formatter
  rustfmt:
    name: Rustfmt [Formatter]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      # - uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      #     override: true
      # - run: rustup component add rustfmt
      # - uses: actions-rs/cargo@v1
      #   with:
      #     command: fmt
      #     args: --all -- --check

  # Run the `clippy` linting tool
  clippy:
    name: Clippy [Linter]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      # - uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      #     override: true
      # - run: rustup component add clippy
      # - uses: actions-rs/clippy-check@v1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     args: --all-targets --all-features -- -D clippy::all

  # Run a security audit on dependencies
  cargo_audit:
    name: Cargo Audit [Security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      # - uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      #     override: true
      # - run: cargo install --force cargo-audit
      # - run: cargo generate-lockfile
      # - uses: actions-rs/cargo@v1
      #   with:
      #     command: audit

  # Ensure that the project could be successfully compiled
  cargo_check:
    name: Compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      # - uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      #     override: true
      # - uses: actions-rs/cargo@v1
      #   with:
      #     command: check
      #     args: --all

  # Run tests on Linux, and macOS
  # On both Rust stable and Rust nightly
  test:
    name: Test Suite
    needs: [cargo_check]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest]
        rust: [stable, nightly]
    steps:
      # Checkout the branch being tested
      - uses: actions/checkout@v1

      # # Install all the required dependencies for testing
      # - uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      #     override: true
      # # Install Node.js at a fixed version
      # - uses: actions/setup-node@master
      #   with:
      #     node-version: "12.0.0"
      # # Install Golang at a fixed version
      # - uses: actions/setup-go@master
      #   with:
      #     go-version: "1.12.1"
      # # Install Ruby at a fixed version
      # - uses: actions/setup-ruby@master
      #   with:
      #     ruby-version: "2.6.3"
      # # Install Python at a fixed version
      # - uses: actions/setup-python@master
      #   with:
      #     python-version: "3.6.9"
      # # Run the ignored tests that expect the above setup
      # - name: Run all tests
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: test
      #     args: -- -Z unstable-options --include-ignored

  # Run the tests in the Docker image
  docker_test:
    name: Test in Docker
    needs: [cargo_check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      # - name: Pull the pre-built Docker image
      #   run: docker pull starshipcommand/starship-test
      # - name: Fix file permissions
      #   run: chmod -R a+w .
      # - name: Build the Docker image
      #   run: docker build -f tests/Dockerfile --tag starshipcommand/starship-test --cache-from starshipcommand/starship-test .
      # - name: Run tests in Docker
      #   run: docker run --rm -v $(pwd):/src/starship starshipcommand/starship-test

  generate_changelog:
    if: github.ref == 'refs/heads/master'
    name: Update Changelog
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Delete old changelog
        run: rm -rf CHANGELOG.md
      - name: Generate changelog
        run: |
          # Temporary fix for https://github.com/actions/setup-go/issues/14
          export PATH=$PATH:$(go env GOPATH)/bin
          go get -u github.com/git-chglog/git-chglog/cmd/git-chglog
          git-chglog -c .github/chglog/changelog.yml > CHANGELOG.md
      - name: Commit new changelog
        run: |
          git config user.email "bot@starship.rs"
          git config user.name "Starship Bot"

          git checkout master
          git add CHANGELOG.md
          git commit -m "chore: Update changelog"
          git push "https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git" master
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  github_release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create GitHub Release
    needs: [test, docker_test]
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: starship-x86_64-unknown-linux-gnu.tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: starship-x86_64-unknown-linux-musl.tar.gz
          - target: x86_64-apple-darwin
            os: macOS-latest
            name: starship-x86_64-apple-darwin.tar.gz
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            name: starship-x86_64-pc-windows-gnu.zip
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: starship-x86_64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Prepare build artifacts [Windows]
        if: contains(matrix.os, 'windows')
        run: |
          strip target/${{ matrix.target }}/release/starship
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.name }} starship 
          cd -

      - name: Prepare build artifacts [-nix]
        if: ! contains(matrix.os, 'windows')
        run: |
          strip target/${{ matrix.target }}/release/starship
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.name }} starship 
          cd -

      - name: Generate release notes
        run: |
          # Temporary fix for https://github.com/actions/setup-go/issues/14
          export PATH=$PATH:$(go env GOPATH)/bin
          go get -u github.com/git-chglog/git-chglog/cmd/git-chglog
          git-chglog -c .github/chglog/release.yml $(git describe --tags) > RELEASE.md

      - name: Create GitHub release ${{ matrix.target }}
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.name }}
          body_path: RELEASE.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
